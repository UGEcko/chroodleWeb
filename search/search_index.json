{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Chroodle!","text":"<p>A haven for Heck Suite users.</p>"},{"location":"#index","title":"Index","text":"<p>Here is what Chroodle has to offer. Below you can be redirected to learn, view data, or troubleshoot errors.</p>"},{"location":"#learn","title":"Learn","text":"<p>Creating Environments  : Learn the basics behind creating custom environments with Chroma</p> <p>BeatSaber Fog  : Learn the basics of how fog works in BeatSaber</p> <p>Geometry  : Learn the basics of Geometry</p> <p>Runtime Unity Editor (RUE)  : Learn the basics of Runtime Unity Editor with BeatSaber applications</p>"},{"location":"#data","title":"Data","text":"<p>Chroma Logs  : Pre-processed Chroma Logs for finding the Chroma IDs of GameObjects</p> <p>Environment Data  : A json file for each environment packed with environment and per-object component data</p> <p>Reference Tables  : Tables to reference from for a bunch of stuff</p> <p>Useful Links  : A dump of links. Thats it. Just bookmark it already.. okay?</p>"},{"location":"#other","title":"Other","text":"<p>Error Troubleshooting  : A problem -&gt; solution page for those encountering commonly found issues in select-environments</p> <p>Contribute  : Interested in contributing to Chroodle? Check this page out!</p> <p>Want to suggest a change or make an addition? Contact ugecko on Discord.</p>"},{"location":"data/clogs/","title":"Chroma Logs","text":""},{"location":"data/clogs/#chroma-logs","title":"Chroma Logs","text":""},{"location":"data/clogs/#select-your-environment","title":"Select your environment","text":"<ol> <li>Select your version of BeatSaber</li> <li>Click on the environment you are using to copy the log to your clipboard. (Alphabetical)</li> </ol> 1.29.11.34.21.37.11.39.11.40.0 <p> BigMirror Billie BTS CrabRave Default Dragons Dragons2 EDM FitBeat Gaga GreenDay GreenDayGrenade Halloween Interscope Kaleidoscope KDA LinkinPark Lizzo Monstercat Nice Origins Panic Panic2 Pyro RockMixtape Rocket Skrillex TheSecond TheWeeknd Timbaland Triangle Weave <p> BigMirror Billie BTS CrabRave Default Dragons Dragons2 EDM FitBeat Gaga GreenDay GreenDayGrenade Halloween Interscope Kaleidoscope KDA Lattice LinkinPark LinkinPark2 Lizzo Monstercat Nice Origins Panic Panic2 Pyro Queen RockMixtape Rocket RollingStones Skrillex TheSecond TheWeeknd Timbaland Triangle Weave <p> BigMirror Billie BTS Collider CrabRave DaftPunk Default Dragons Dragons2 EDM FitBeat Gaga GreenDay GreenDayGrenade Halloween HipHopMixtape Interscope Kaleidoscope KDA Lattice LinkinPark LinkinPark2 Lizzo Monstercat Nice Origins Panic Panic2 Pyro Queen RockMixtape Rocket RollingStones Skrillex TheSecond TheWeeknd Timbaland Triangle Weave <p> BigMirror Billie Britney BTS Collider CrabRave DaftPunk Default Dragons Dragons2 EDM FitBeat Gaga GreenDay GreenDayGrenade Halloween HipHopMixtape Interscope Kaleidoscope KDA Lattice Lizzo LinkinPark LinkinPark2 Monstercat Monstercat2 Nice Origins Panic Panic2 Pyro Queen RockMixtape Rocket RollingStones Skrillex TheSecond TheWeeknd Timbaland Triangle Weave <p> BigMirror Billie Britney BTS Collider CrabRave DaftPunk Default Dragons Dragons2 EDM FitBeat Gaga GreenDay GreenDayGrenade Halloween HipHopMixtape Interscope Kaleidoscope KDA Lattice LinkinPark LinkinPark2 Lizzo Metallica Monstercat Monstercat2 Nice Origins Panic Panic2 Pyro Queen RockMixtape Rocket RollingStones Skrillex TheSecond TheWeeknd Timbaland Triangle Weave"},{"location":"data/clogs/#helpful-information","title":"Helpful Information","text":"<p>Some environment names that may confuse you:</p> ID Name Beatsaber Name HalloweenEnvironment Spooky HipHopEnvironment HipHop Mixtape PyroEnvironment Fall Out Boy RocketEnvironment Rocket League BritneyEnvironment Britney Spears <p>Environment IDs that have a 2 in their name is the \"Remastered\" Group-Lighting version.  Ex: <code>LinkinPark2Environment</code></p> <p>Environment Releases (Versions shown are currently supported by the Heck Suite).</p> 1.29.1 1.34.2 1.37.1 1.39.1 1.40.0 Default Queen DaftPunk Britney Metallica Triangle LinkinPark2 HipHopMixtape Monstercat2 Nice RollingStones Collider BigMirror Lattice KDA Monstercat CrabRave Dragons Origins Panic Rocket GreenDay GreenDayGrenade Timbaland FitBeat LinkinPark BTS Kaleidoscope Interscope Skrillex Billie Halloween Gaga Weave Pyro EDM TheSecond Lizzo TheWeeknd RockMixtape Dragons2 Panic2"},{"location":"data/clogs/#faq","title":"FAQ","text":"What are 'Chroma Logs'? <p>Chroma Logs are logs that provide the Chroma ID (as a string) for every GameObject in a specific environment.  This system was created to allow modders to target specific objects in the form of a string and manipulate them.</p> <p>Why are they posted here?</p> <p>In the past, these logs were often outdated, or some logs werent processed for readability. </p> <p>Chroodle however, houses the most updated logs\u2013each one being fully processed from a bare installation of each version sampled.</p> Which versions of BeatSaber are sampled? <p>The following versions are currently sampled:</p> <ul> <li>1.29.1</li> <li>1.34.2</li> <li>1.37.1</li> <li>1.39.1</li> <li>1.40.0</li> </ul> <p>Any new environments that each version came with are included.</p> <p>NOTE: Just because your version of the game doesn't show up here doesn't necessarily mean its not supported. These versions are just to keep up with any potential changes in the environment structure that changes the ID's of some objects per version.</p> Is there a tool to see if a Regex argument is compatible with other sampled versions? <p>Soon\u2122</p> Copy buttons dont work? <p>If the copy button doesn't work for you, please refer to the chroodle repository on github where the files are sourced from</p>"},{"location":"data/envdata/","title":"Environment Data","text":""},{"location":"data/envdata/#environment-data","title":"Environment Data","text":"<p>A directory housing extensive BeatSaber Environment information</p>"},{"location":"data/envdata/#select-your-environment","title":"Select your environment","text":"<ol> <li>Select your version of BeatSaber</li> <li>Click on the desired environment to download the JSON file, or view it in here</li> </ol> 1.29.11.34.21.37.11.39.11.40.0 <p> BigMirror Billie BTS CrabRave Default Dragons Dragons2 EDM FitBeat Gaga GreenDay GreenDayGrenade Halloween Interscope KDA Kaleidoscope LinkinPark Lizzo Monstercat Nice Origins Panic Panic2 Pyro RockMixtape Rocket Skrillex TheSecond TheWeeknd Timbaland Triangle Weave <p> BigMirror Billie BTS CrabRave Default Dragons Dragons2 EDM FitBeat Gaga GreenDay GreenDayGrenade Halloween Interscope KDA Kaleidoscope Lattice LinkinPark LinkinPark2 Lizzo Monstercat Nice Origins Panic Panic2 Pyro Queen RockMixtape Rocket Skrillex TheRollingStones TheSecond TheWeeknd Timbaland Triangle Weave <p> BigMirror Billie BTS Collider CrabRave DaftPunk Default Dragons Dragons2 EDM FitBeat Gaga GreenDay GreenDayGrenade Halloween HipHopMixtape Interscope Kaleidoscope KDA Lattice LinkinPark LinkinPark2 Lizzo Monstercat Nice Origins Panic Panic2 Pyro Queen Rocket RockMixtape Skrillex TheRollingStones TheSecond TheWeeknd Timbaland Triangle Weave <p> BigMirror Billie Britney BTS Collider CrabRave DaftPunk Default Dragons Dragons2 EDM FitBeat Gaga GreenDay GreenDayGrenade Halloween HipHopMixtape Interscope Kaleidoscope KDA Lattice LinkinPark LinkinPark2 Lizzo Monstercat Monstercat2 Nice Origins Panic Panic2 Pyro Queen Rocket RockMixtape Skrillex TheRollingStones TheSecond TheWeeknd Timbaland Triangle Weave <p> BigMirror Billie Britney BTS Collider CrabRave DaftPunk Default Dragons Dragons2 EDM FitBeat Gaga GreenDay GreenDayGrenade Halloween HipHopMixtape Interscope Kaleidoscope KDA Lattice LinkinPark LinkinPark2 Lizzo Metallica Monstercat Monstercat2 Nice Origins Panic Panic2 Pyro Queen RockMixtape Rocket Skrillex RollingStones TheSecond TheWeeknd Timbaland Triangle Weave <p>Download EnvData</p> <p>View EnvData</p> Supported Components <p>99% of components will have a <code>Transform</code> component, but some may have more to help out with specific cases.</p> <p>The following components will be listed with selected properties:</p> <ul> <li>Transform</li> <li> <ul> <li>position</li> </ul> </li> <li> <ul> <li>localPosition</li> </ul> </li> <li> <ul> <li>rotation</li> </ul> </li> <li> <ul> <li>localRotation</li> </ul> </li> <li> <ul> <li>localScale</li> </ul> </li> <li>TrackLaneRingsManager</li> <li> <ul> <li>ringCount</li> </ul> </li> <li> <ul> <li>ringPositionZStep</li> </ul> </li> <li>MeshFilter</li> <li> <ul> <li>boundCenter</li> </ul> </li> <li> <ul> <li>boundSize</li> </ul> </li> <li>TubeBloomPrePassLight</li> <li> <ul> <li>colorAlphaMultiplier</li> </ul> </li> <li> <ul> <li>bloomFogIntensityMultiplier</li> </ul> </li> <li> <ul> <li>length</li> </ul> </li> <li> <ul> <li>width</li> </ul> </li> <li>TubeBloomPrePassLightWithId</li> <li> <ul> <li>tubeLightId</li> </ul> </li> <li>DirectionalLightWithId</li> <li> <ul> <li>lightId</li> </ul> </li> <li>Animator</li> <li> <ul> <li>animatorParameters</li> </ul> </li> <li> <ul> <li>animatorLayerNames</li> </ul> </li> <li>LightManager</li> <li> <ul> <li>directionalLightDirections</li> </ul> </li> <li> <ul> <li>directionalLightPositions</li> </ul> </li> <li>DirectionalLight</li> <li> <ul> <li>lightIntensity</li> </ul> </li> <li> <ul> <li>lightRadius</li> </ul> </li> <li> <ul> <li>lightRotation</li> </ul> </li> <li>BakedReflectionProbe</li> <li> <ul> <li>probeSize</li> </ul> </li> <li> <ul> <li>probePosition</li> </ul> </li> <li>SpriteLightWithId</li> <li> <ul> <li>spriteLightId</li> </ul> </li> <li> <ul> <li>intensity</li> </ul> </li> <li>RectangleFakeGlow</li> <li> <ul> <li>rectangleSize</li> </ul> </li> <li>RectangleFakeGlowWithLightId</li> <li> <ul> <li>rectangleLightId</li> </ul> </li> <li>EnvironmentBrandingManager</li> <li> <ul> <li>brandingObjects</li> </ul> </li> <li>ParticleSystemWithLightId</li> <li> <ul> <li>particleLightId</li> </ul> </li> <li> <ul> <li>particleLightIntensity</li> </ul> </li> <li>InstancedMaterialLightWithId</li> <li> <ul> <li>materialLightId</li> </ul> </li> <li> <ul> <li>materialLightIntensity</li> </ul> </li> <li>MeshCollider</li> <li> <ul> <li>meshBoundsCenter</li> </ul> </li> <li> <ul> <li>meshBoundsSize</li> </ul> </li> <li>CloudsMeshGenerator (1.37.1+ Only)</li> <li> <ul> <li>cloudsBoundSize</li> </ul> </li> <li> <ul> <li>cloudsBoundCenter</li> </ul> </li> <li>CustomBoundingBox</li> <li> <ul> <li>customBoundCenter</li> </ul> </li> <li> <ul> <li>customBoundSize</li> </ul> </li> <li>Animation</li> <li> <ul> <li>clipFrameRate</li> </ul> </li> <li> <ul> <li>clipLength</li> </ul> </li> <li>SmoothStepPositionEventEffect</li> <li> <ul> <li>minY</li> </ul> </li> <li> <ul> <li>maxY</li> </ul> </li> <li> <ul> <li>stepSize</li> </ul> </li> <li> <ul> <li>startPos</li> </ul> </li> <li> <ul> <li>easing</li> </ul> </li> <li>LightGroupCircularLayouter</li> <li> <ul> <li>circularRadius</li> </ul> </li> <li> <ul> <li>circularAngle</li> </ul> </li> <li> <ul> <li>groupId</li> </ul> </li> <li>SmoothStepPositionGroupEventEffect</li> <li> <ul> <li>groupMinY</li> </ul> </li> <li> <ul> <li>groupMaxY</li> </ul> </li> <li> <ul> <li>groupStepSize</li> </ul> </li> <li> <ul> <li>groupStartPos</li> </ul> </li> <li> <ul> <li>groupEasing</li> </ul> </li> </ul> <p>The following components will be listed without any properties listed:</p> <ul> <li>BloomFogEnvironment</li> <li>EnvironmentSceneSetup</li> <li>LightWithIdManager</li> <li>Canvas</li> <li>ParticleSystem</li> <li>Spectrogram</li> <li>BloomPrePassBackgroundColorsGradient</li> <li>Mirror</li> <li>SaberBurnMarkArea</li> <li>TrackLaneRing</li> <li>LightColorGroupEffectManager</li> <li>LightRotationGroupEffectManager</li> <li>LightGroup</li> <li>LightGroupLinearLayouter</li> <li>LightRotationGroup</li> <li>ContinuousFireEffect</li> <li>BurstFireEffect</li> <li>LightmapLightWithIdsGroupEntry</li> <li>FloatingTransformEffect</li> <li>LightTranslationGroup</li> <li>TransformSpectrogram</li> <li>ColorArrayLightWithIds</li> <li>LevelFailedTextOverride</li> <li>MoveInDirectionEffect</li> <li>TubeBloomPrePassLightCollisionEffect</li> <li>TubeBloomPrePassLightReflectionEffect</li> <li>MaterialLightWithId</li> <li>BTSCharacterSpawnController</li> <li>RigidBody</li> <li>LightmapLightWithIds</li> <li>ParticleSystemLightWithIds</li> <li>GameObjectSwitchEventEffect</li> <li>FloorLightTilesGrid</li> <li>LightColorGroup</li> <li>LightColorGroupParent</li> <li>SpectrogramRow</li> <li>VideoPlayer</li> <li>TransformLayouter</li> </ul>"},{"location":"data/envdata/#paq","title":"PAQ","text":"<p>Lets call this one \"Potentially-Asked-Questions\" because this like just came public..</p> WHAT IS THIS? <p>\"Environment Data\" (Pending revolutionary rebranding) is a JSON file similar to chroma logs, but contains significantly more information.</p> <p>Ever want the position or rotation of an object? Ever want the collider bounds of an object? You will probably love this.</p> <p>Each environment here is represented as a JSON file.  It consists of:</p> <p>Environment Data  : (Environment titles, colorScheme, and default fog parameters)</p> <p>Object Data  :  (Name, Chroma ID, and a select-list of components)</p> <p>EnvironmentData Example</p> <pre><code>{\n  \"environmentData\": {\n    \"environmentTitle\": \"The First\",\n    \"environmentId\": \"DefaultEnvironment\",\n    \"colorScheme\": {\n      \"colorLeft\": [float,float,float],\n      \"colorRight\": [float,float,float],\n      \"envColorLeft\": [float,float,float],\n      \"envColorRight\": [float,float,float],\n      \"obstacleColor\": [float,float,float],\n      \"envColorLeftBoost\": [float,float,float],\n      \"envColorRightBoost\": [float,float,float]\n    },\n    \"fogParams\": {\n      \"offset\": float,\n      \"height\": float,\n      \"startY\": float,\n      \"attenuation\": float\n    }\n  },\n  \"objects\": [\n    {\n      \"name\": \"GameObject Name\",\n      \"id\": \"ChromaID\",\n      \"components\": {\n        \"Transform\": {\n          \"position\": [float,float,float],\n          \"localPosition\": [float,float,float],\n          \"rotation\": [float,float,float],\n          \"localRotation\": [float,float,float],\n          \"scale\": [float,float,float]\n        },\n        \"OtherComponent\": {}\n      }\n    }\n  ]\n}\n</code></pre> <p>In the future, there will be an API that allows you to access this data from your scripts with a fully functional, easy-to-use class interface. Is this cool? plsbecoolthistookmesolongtocreate</p> Which versions of BeatSaber are sampled? <p>The following versions are currently sampled:</p> <ul> <li>1.29.1</li> <li>1.34.2</li> <li>1.37.1</li> <li>1.39.1</li> <li>1.40.0</li> </ul> Download buttons dont work? <p>If the download button doesn't work for you, please refer to the chroodle repository on github where the files are sourced from</p>"},{"location":"data/links/","title":"Useful Links","text":"<p>Check this awesome page out for a goldmine of links with varying usages!</p> <p>Notice</p> <p>This page (and entire site) is mainly geared towards mappers and modcharters, NOT game modders. Check out the \"Other Links\"  on the BSMG wiki modding page for links more related to game modding.</p> <p>To organize and future proof, links will be organized in categories, some being more specific than others to avoid a crazy tree of categories. </p> <p>Navigation Tip</p> <p>This site supports text searching and search highlighting! If you are looking for something specific and may not know where to find it, you can search for the subject in the search bar located at the top right :D</p>"},{"location":"data/links/#mapping-modcharting","title":"Mapping / Modcharting","text":"<p>Heck Wiki  : The official documentation for the Heck suite. An absolute essential for anybody utilizing Heck mods.</p> <p>BSMG Wiki  : The site that every player with a modded BeatSaber installation should have bookmarked. Covers everything from Mapping, Modding, and so much more.</p> <p>BeatMods  : The hub for all approved plugins for BeatSaber and ChroMapper.</p> <p>BS Mapping Utility  : A fine amount of utilities for miscellaneous stuff. Another fine site to have bookmarked.</p> <p>Equivalent Fractions  : A list of fractions equivalent to each other from 0 - 1. Great for syncing path animations along with the games base jump animations.</p> <p>easings.net  : All available easings for use excluding easeStep (Click on them for a slew of stuff including visual examples!)</p> <p>Regexr  : One of the top sites for creating Regular Expressions (Regex). Each piece of the expression is also explained if you dont know what it does!</p>"},{"location":"data/links/#scripting-libraries","title":"Scripting Libraries","text":"<p>ReMapper by Swifter  : A Typescript library that supports the latest from the Heck Library.</p> <p>Wumbo Template by Mawntee  : An all in one Javascript template/script geared towards beginners.</p> <p>HeckLib by Jevk  : A TS/Node.js library for creating modhcarts.</p>"},{"location":"data/links/#applications","title":"Applications","text":"<p>ChroMapper  : The go-to mapping application for creating maps! ChroMapper also supports animations, geometry, and much more for modcharters. Plugins will also help you alot!</p>"},{"location":"data/links/#faqs","title":"FAQs","text":"<p>ChroMapper FAQ  : Have an issue with ChroMapper? Check this page for common issues before reaching out for support.</p> <p>BSMG FAQ  : FAQ for modding BeatSaber, making maps, downloading/loading up maps, etc..</p>"},{"location":"data/links/#video-tutorials","title":"Video Tutorials","text":"<p>ChroMapper Tutorial (Youtube)</p> <p>Notice</p> <p>ChroMapper has grown a lot since this video has been made, so some things you may have to look in other spots for, but for the most part everything is the same.</p> <p>PropEdit (ChroMapper) guide (Youtube)  : Some weird whimsical random guys guide on PropEdit, and basic Noodle Extensions usage of PropEdit in ChroMapper!</p> <p>Info</p> <p>\"PropEdit\" is a ChroMapper plugin that focuses on making modhcarts easier for those who aren't into script-based solutions. The plugin provides a UI that enables the mapper to add most of what the Heck Suite offers into their maps effortlessly.</p> <p>Note: While the video is around a year old and many updates have happened since, it is still a great introduction to the plugin.</p> <p>Other thingys:  V3 is now the standard for map formatting, you do not have to convert the map from V2 to V3.  CM Plugins are now hosted on BeatMods!</p> <p>How to use ProBuilder inside Unity (Youtube)  : A playlist on ProBuilder in unity.</p> <p>How to create Particle Systems inside Unity (Youtube)  : A great starting point for getting into Unity Particle Systems.</p> <p>Heck Animations Overview  : A video covering every style of animation with Noodle/Chroma.</p>"},{"location":"data/links/#tools","title":"Tools","text":"<p>Photo Multitool  : A slew of random tools for editing photos. Yes.</p> <p>Asset Bundle Extrator (UABE)  : Extract assets from a Unity AssetBundle</p> <p>Video Compressor  : Simple video compressor, specify the file size aswell!</p>"},{"location":"data/links/#everything-vivify","title":"Everything Vivify","text":""},{"location":"data/links/#shaders","title":"Shaders","text":"<p>Shader Pragma Directives (Unity Docs)</p> <p>Shader GPU Instancing (Github)  : Unity HLSL Shader Instancing + some.</p> <p>Learn shader effects | Ronja Tutorials  : Learn a bunch of shader effects here.</p> <p>Learn about shaders in unity from the ground up  : Learn about HLSL, writing shaders, examples, etc...</p> <p>Learn about draw call performance (Youtube)</p> <p>Introduction to the Raymarching technique (Youtube)  : A great video explaining the Raymarching technique in GLSL.</p> <p>Surface Shader Examples in Unity (Unity Docs)  : A bunch of examples with surface shading.</p> <p>Unity Built-In Shader Variables (Unity Docs)  : (!IMPORTANT!)</p> <p>Unity \"UnityCG\" Include source (Unity Docs)  : \"What does <code>#include \"UnityCG.cginc\"</code> add to my shader file?\" This!</p> <p>Standard CG Shader Library  : A bunch of math functions included with the standard library.</p> <p>Shader Knowledge</p> <p>iquilezles.  : An absolute goldmine of knowledge with shader.. Just shader.</p> <p>The Book of Shaders  : A great introduction to shaders!</p> <p>Writing HLSL (Unity Docs)  : Learn how to write HLSL programs</p> <p>Shader Anatomy (Unity)  : Learn about the structure of a HLSL shader!</p> <p>Global Variables for BeatSaber Shaders (1.29.1)  : All Global Variables for shaders found on BeatSaber shaders on 1.29.1</p>"},{"location":"data/links/#assets","title":"Assets","text":"<p>Noise Pack (Free)  : Its a free pack of noise textures cmon</p> <p>Gradient Pack (Free)  : Its a free pack of gradient textures CMON.</p>"},{"location":"data/links/#unity-packages","title":"Unity Packages","text":"<p>CurveMaster (30$)  : A tool for tuning your animation curves in Unity.</p> <p>Better UnityAnimationWindow (Audio Waveforms!)  : Add your song to the animation window as a waveform WITH beat markers!</p>"},{"location":"data/links/#community-discord-servers","title":"Community Discord Servers","text":"<p>Beat Saber Modding Group (BSMG)</p> <p>Beat Saber Mapping</p> <p>ChroMapper</p>"},{"location":"data/reftable/","title":"Reference Tables","text":"<p>A page for stuff to reference/glance at.</p>"},{"location":"data/reftable/#geometry-reference-table","title":"Geometry Reference Table","text":"Primitives Shaders Sphere Standard Capsule OpaqueLight Cylinder TransparentLight Cube BaseWater Plane BillieWater Quad BTSPillar Triangle InterscopeConcrete Interscope Car Obstacle (Broken) WaterfallMirror"},{"location":"data/reftable/#conversion-ratios-table","title":"Conversion Ratios Table","text":""},{"location":"data/reftable/#unity-units-noodle-units","title":"Unity Units &lt;=&gt; Noodle Units","text":"<p>1 meter (Unity Unit) =&gt; 0.6 meters (Noodle Unit)</p> Why? <p>Because Noodle Extensions focuses on manipulation of gameplay objects like notes, the mod uses the width of a lane (0.6 meters) on the grid as 1 unit.This makes gameplay mods like note animations easier, as shifting a note to the left 1 unit would keep it in line with the grid.</p> <p>This is why <code>offsetPosition</code> exists, to offset the gameplay object from the note grid.</p> <p>Environment Objects (Including the player) are normal Unity objects, so they use the normal 1 meter unit.</p> <p>To Noodle: <code>xyz * 0.6</code></p> <p>To Unity (Environment/Player): <code>xyz / 0.6</code></p>"},{"location":"learn/envs/","title":"Environments","text":"<p>(Pending rewrite)</p> <p>This page covers everything about Environments! From lighting to full-on custom environments. Even simple aspects such as Environment Removal.</p>"},{"location":"learn/envs/#introduction-to-beatsaber-environments","title":"Introduction to Beatsaber Environments","text":"<p>Ever want to add a couple of extra lasers to an environment? Do you not like the Timbaland logo? Did you ever want to create a fully custom environment? Having environment knowledge is one of the basic skills that makes you an amazing map creator... Well, you're in luck! This page will provide as much information as your tiny or big brain can handle!</p>"},{"location":"learn/envs/#environment-chroma-ids","title":"Environment (Chroma) IDs","text":"<p>One of the main things you must learn when modifying environments is the basic understanding of how objects in Beatsaber can be modified. We do this by their ID. IDs are created by the Chroma mod so you can use the IDs to modify the object the ID represents, properties that you can modify are here.</p>"},{"location":"learn/envs/#chroma-id-structure","title":"Chroma ID Structure","text":"<p>Chroma IDs may seem complicated for some at first, but rest assured they are incredibly easy to read. Here is an example with an explanation:</p> <p><code>BTSEnvironment.[0]Environment.[9]NarrowGameHUD.[1]LeftPanel.[0]ComboPanel.[0]ComboText</code></p> <p>Look at this ID. Can you tell what object this represents? Perhaps what environment this object is in? </p> <p>If you answered the BTS Environment and the \"COMBO\" text, you are correct! MOST IDs consist of the environment ID/name at the beginning and the object name at the end. Some IDs may start with <code>GameCore</code>, there doesn't seem to be a pattern of which environments have this or don't, but common ones are Timbaland, Crab Rave, Skrillex, etc. (Perhaps its older environments). But that's not the best way to look at it.</p> <p>For a deeper understanding, think about the actual object in the scene. ComboText is the child of the ComboPanel, ComboPanel is the child of LeftPanel, LeftPanel is the child of NarrowGameHUD, etc... This is how Chroma creates the IDs, by reading every single object in the environments hierarchy and assigning it a unique ID. A child object has the ID of its parent object along with its own.</p> <p>To prove this works, if you set <code>BTSEnvironment.[0]Environment</code> active to false, everything in the environment is a child to this object so everything will be inactive. However, if you do the same for a more specific object like <code>BTSEnvironment.[0]Environment.[6]PlayersPlace</code>, the PlayersPlace including its children will be inactive.</p>"},{"location":"learn/envs/#environment-modification","title":"Environment Modification","text":"<p>In this section, you will learn how to modify an object's properties such as its transform data, set its active state, apply noodle tracks, the different types of lookup methods, and more!</p> <p>For starters, let's explain the structure of the Environment array in the difficulty file (Taken from heck wiki): <pre><code>  \"environment\": [\n    {\n      \"id\": \"^.*\\\\[\\\\d*[13579]\\\\]BigTrackLaneRing\\\\(Clone\\\\)$\",\n      \"lookupMethod\": \"Regex\",\n      \"scale\": [0.1, 0.1, 0.1]\n    }\n  ]\n</code></pre></p> <p>The environment array in the difficulty file contains all environment enhancement actions. In the example above, you may see some properties (id, lookupMethod, and scale). All properties are defined in the Environment section of the heck wiki. </p> <p>This example finds the object that ID <code>^.*\\\\[\\\\d*[13579]\\\\]BigTrackLaneRing\\\\(Clone\\\\)$</code> represents using Regex, and sets its scale on all axis by 0.1.</p>"},{"location":"learn/envs/#lookup-methods","title":"Lookup Methods","text":"<p>Lookup Methods are methods of finding an ID in a string of every single ID for the environment. (Chroma logs are a great way to represent this process).</p> <p>Below are some definitions and examples for the 5 different lookup methods using this ID:   <code>GameCore.[7]PairLaserTrackLaneRing(Clone).[5]RotatingLasersPair</code> </p> <p>Regex (Regular/Rational Expression) : This method utilizes many different symbols like <code>$</code>,<code>*</code>,<code>\\</code>, and more to locate patterns in the chroma logs to find what you're looking for. This has some advantages like being more future-proof compared to methods like <code>Exact</code>, and finding more than one ID at a time. You may use websites like https://regex101.com to cook up some regular expressions for IDs. | <code>7]PairLaserTrackLaneRing\\(Clone\\).\\[5]RotatingLasersPair$</code></p> <p>Exact : This method behaves like the name states. Type in the exact ID to find the object. | <code>GameCore.[7]PairLaserTrackLaneRing(Clone).[5]RotatingLasersPair</code></p> <p>Contains : This method finds every ID that contains a specific string of text. For example, using <code>Environment</code> will result in everything being found, as every ID contains Environment. | <code>[7]PairLaserTrackLaneRing(Clone).[5]RotatingLasersPair</code> (Has to be specific since there are many instances of [5]RotatingLasersPair).</p> <p>StartsWith : This method compares a string of text with every ID by its starting text. A string of text with 10 characters would be compared with the first 10 characters of every single ID. | <code>GameCore.[7]PairLaserTrackLaneRing(Clone).[5]</code></p> <p>EndsWith : This method is exactly like StartsWith, however instead of being found by starting with a substring, it's found by the ID ending with a specific substring. | <code>[7]PairLaserTrackLaneRing(Clone).[5]RotatingLasersPair</code></p>"},{"location":"learn/envs/#components","title":"Components","text":"<p>Ever wonder how lights get their IDs and Types.. or how some lights may have more or less bloom than others, or even how fog is controlled? Components are all behind it! (Components are fairly limited at this time to 3 components listed on the Heck wiki. We will go through and explain all 3).</p> <p>If components specifically in Beatsaber seem confusing to you right now, think about components as branches of a Gameobject, and that branch contains values that control an aspect of the Gameobject in some way. For example, the <code>BloomFogEnvironment</code> component located only on the <code>Environment</code> parent Gameobject contains values that control the environment's fog (Attenuation, Height, StartY, and Offset). </p> <p>As said before, the components that you are able to modify is limited to 3. Those being:</p> <p>BloomFogEnvironment  : The component located only on the Environment object that controls the fog properties.</p> <p>ILightWithId : The component that defines the LightID and Type of the light.</p> <p>TubeBloomPrePassLight : The component that lets you multiply the <code>colorAlpha</code>, and <code>bloomFogIntensity</code> properties of a light (The visibility of the lightbox, and the bloom intensity of the laser/light).</p> <p>Example: A duplicated laser with ID 100 and type 3, with a bloom multiplier of 3. <pre><code>{\n  \"id\": \"LaserIDUsingExactLookup\",\n  \"duplicate\" : 1,\n  \"lookupMethod\": \"Exact\",\n  \"components\": {\n    \"ILightWithId\": {\n      \"lightID\" : 100,\n      \"type\": 3\n    },\n    \"TubeBloomPrePassLight\" : {\n      \"bloomFogIntensityMultiplier\": 3\n    }\n  }\n}\n</code></pre></p> <p>Ever want to animate the fog attenuation? Or do you want to slowly increase a lasers colorAlphaMultiplier over time? You can do that by animating components using the AnimateComponent custom event (Only requires chroma!)</p>"},{"location":"learn/fog/","title":"Fog","text":"<p>On this page you can learn the basics behind fog in Beat Saber, an important aspect to consider when creating Custom Environments.</p> <p>(Modified version of nasafrasas in-depth fog guide)</p>"},{"location":"learn/fog/#basics","title":"Basics","text":"<p>Fog is split into two parts:</p> <p>Atmospheric density (<code>attenuation</code> &amp; <code>offset</code>)  : Atmospheric density deals with the fog that follows and is always around the player/camera.</p> <p>Height Fog (<code>startY</code> &amp; <code>height</code>)  : Height Fog is fog that fades out ALL objects from a certain height onwards(1)</p> <ol> <li>You can't change the height fog density as it will always have a point where the fog dissolves everything.</li> </ol> <p>Both parts work together to create a neat fog effect without being too complicated.</p>"},{"location":"learn/fog/#attenuation","title":"Attenuation","text":"<p>Attenuation is the intensity of the atmospheric density of the fog between -1 and 1  (0 and 1 for Quest) logarithmically(1). This is most often used for adding depth to an environment and making it feel more dynamic and alive.</p> <ol> <li>There is a big change between 0.01 and 0.02, but barely any change between 0.1 and 0.2.      A basic logarithm function,     <code>y = log(x)</code></li> </ol> Attenuation chart <p> red text: attenuation  white text: distance of a geometry cube from the camera in blender units </p>"},{"location":"learn/fog/#offset","title":"Offset","text":"<p>Offset is how far away the fog attenuation starts from the camera. The bigger the number, the further away the fog will start.</p> Offset examples <p>For simplicity, these diagrams are 2D instead of 3D. In-game this is not a circle, but a sphere around the camera.</p> <p></p> <p></p>"},{"location":"learn/fog/#height-start-y","title":"Height &amp; Start Y","text":"<p>The <code>height</code> and <code>startY</code> fields work together to control the vertical (Y-axis) fog</p> <p>startY  : Where all objects will be dissolved into the fog on the Y-axis</p> <p>height  : The height of the fog gradient</p> <p>The <code>height</code> is relative to the <code>startY</code>.  For example, if <code>startY</code> was <code>-15</code> and <code>height</code> was <code>15</code>:  The fog gradient would start at 0 (<code>-15 + 15</code>) and end at -15. Every object under <code>Y -15</code> being completely dissolved.  These parameters can also be inverted!</p> Height fog examples <p></p> <p><code>startY</code>: -4  <code>height</code>: 4</p> <p></p> <p><code>startY</code>: -1  <code>height</code>: 2</p> <p>You can even invert the height and startY\u2013You would usually use this for environments with full ground and caves.</p> <p></p> <p><code>startY</code>: 2  <code>height</code>: -3</p>"},{"location":"learn/fog/#tools","title":"Tools","text":"<p>Here lies a some tools to help you out with anything related to fog</p> <ul> <li> <p>Visualize how fog works in Desmos (Made by Swifter)</p> </li> <li> <p>Make experimenting with fog parameters in-game easier with the MapperTools mod. (Coming Soon)</p> </li> </ul>"},{"location":"learn/fog/#map-examples","title":"Map Examples","text":"<p>Below provides some examples of fog configurations by already published maps.</p> \"Spells\" published by Swifter <p>Normal</p> <p>This is the normal fog configuration that is set for the beginning of the map.</p> <p></p> <p>High Offset / Normal Attenuation</p> <p>Notice the change from no fog -&gt; fog on farther objects.</p> <p></p> <p>0 Attenuation / Normal Offset</p> <p>With 0 attenuation at any distance, you get a scene that lacks depth.</p> <p></p> <p>0 Attenuation / Inverted startY + height</p> <p></p> \"Flares\" published by Nasafrasa <p>Normal</p> <p>This is the normal fog configuration that is set for the beginning of the map.</p> <p></p> <p>High Offset / Normal Attenuation</p> <p>Notice the change from no fog -&gt; fog on farther objects.</p> <p></p> <p>0 Attenuation / Normal Offset</p> <p>With 0 attenuation at any distance, anything above the height fog in this case lacks depth. </p> <p></p> <p>0 Attenuation / Slightly increased startY / 0 height</p> <p>Heres a good example of how height works.. See how it looks like a plane on the bottom now? Thats because at the startY it will instantly interpolate to fully dissolved.</p> <p></p>"},{"location":"learn/geometry/","title":"Geometry","text":"<p>Here you can learn the basics of Geometry in your maps.</p>"},{"location":"learn/geometry/#why","title":"Why?","text":"<p>Before Geometry was added into Chroma, artists had to target environment objects that were able to be easily manipulated into a cube, then further scaled into objects to create environments. Common objects that were effective in this approach were the <code>BTSPillar</code> and <code>BackCube</code> from Gaga.</p> <p>After a couple years, Aeroluna the G.O.A.T decided to make creating such environments simpler, giving artists access to unity's native primitives in the same fashion (Plus the triangle of course).   This gave us a concrete way of creating environments for ALL game versions, aswell as providing a series of materials to make environments more interesting!</p> Take a peek at the differences between the Environment and Geometry approaches EnvironmentGeometry <p>When using environment \"cubes\", you must add an offset/multiplier to the    transform to get a cube that is scaled to 1 unit. Any animations must   factor   this in aswell. <pre><code>\"environment\": [\n  {\n    \"id\": \"BTSPillarWhateverID\",\n    \"lookupMethod\": \"Regex\",\n    \"scale\": [0.285714, 0.008868, 0.285714],\n    \"position\": [0, 0.4999, 0]\n  }\n]\n</code></pre></p> <p>Geometry provides primitives that are already scaled to 1 unit, and will    scale uniformly. <pre><code>\"environment\": [\n    {\n      \"geometry\": {\n        \"type\": \"Cube\",\n        \"material\": {\n          \"shader\": \"BTSPillar\" // Use the same shader as the BTS Pillar\n        }\n      }\n    }\n  ]\n</code></pre></p>"},{"location":"learn/geometry/#basics","title":"Basics","text":"<p>Creating Geometry in your maps JSON is very similar to manipulating environment objects, just with a few changes.</p> <p>To kick it off, Geometry MUST be defined with type and material. </p> <ul> <li> <p>The <code>type</code> is the primtive mesh you will be using. Like I mentioned above, all unity primitives plus triangles are included.</p> </li> <li> <p>The <code>material</code> is what defines the graphical looks of the Geometry.  This includes the <code>color</code>, <code>shader</code>, and <code>shader keywords</code> properties (aswell as <code>track</code> for animating the <code>color</code>.)</p> </li> </ul> <p>The types of Geometry are as follows:</p> <ul> <li>Sphere</li> <li>Capsule</li> <li>Cylinder</li> <li>Cube</li> <li>Plane</li> <li>Quad</li> <li>Triangle</li> </ul> <p>Warning</p> <p>Unfortunately, there is a limitation that could be no issue, or could impact you.  If you choose to create a large (sphere/capsule/cylinder), you may notice you can see the individual vertices on the object.  This is because at such a size there arent enough subdivisions done to the object to make it smooooth. There really isnt an easy way to get around this without turning to Vivify to create your own model.</p>"},{"location":"learn/geometry/#materials","title":"Materials","text":"<p>Say you want to create a black cube that reflects NO light, or you want to create a yellow shiny sphere. You do that with Geometry Materials!</p> <p>Geometry materials can be created in two different ways:</p> <p>Directly in the geometry JSON  : You define the material properties in the geometry object (Preferably when you arent pooling materials).</p> <p>Creating a geometry material  : Create a geometry material and reference the name in the geometry material property (Like a point definition but for materials).</p> <p>When you create a geometry material, it should be placed in the <code>materials</code> object in the difficulty file:</p> <p>Materials: <pre><code>\"materials\": {\n  \"PillarMaterialWhite\": {\n    \"shader\": \"BTSPillar\",\n    \"color\": [1,1,1],\n    \"shaderKeywords\": []\n  }\n}\n</code></pre></p> <p>Geometry referencing the material:</p> <p><pre><code>\"geometry\": {\n  \"type\": \"Cube\",\n  \"material\": \"PillarMaterialWhite\"\n}\n</code></pre> </p> <p>If you are making a singular object, it may be in your best interest to just directly define the material in the geometry in the <code>material</code> object:</p> <pre><code>\"geometry\": {\n  \"type\": \"Cube\",\n  \"material\": {\n    \"shader\": \"BTSPillar\",\n    \"color\": [1,1,1],\n    \"shaderKeywords\": []\n  }\n}\n</code></pre>"},{"location":"learn/geometry/#shaders","title":"Shaders","text":"<p>Unfortunately, you cannot use any 3rd party shaders, however one of the provided shaders should do the trick.</p> <p>Provided Shaders:</p> <ul> <li>Standard</li> <li>OpaqueLight</li> <li>TransparentLight</li> <li>BaseWater</li> <li>BillieWater</li> <li>BTSPillar</li> <li>InterscopeConcrete</li> <li>WaterfallMirror</li> <li>Obstacle (DON'T USE IT WILL CRASH YOUR GAME INTO THE VOID)</li> </ul> <p>These shaders aren't exclusive to specific environments, so <code>BillieWater</code> will work on any environment, however some shaders have different circumstances so they may look off in other environments.</p> <p></p>"},{"location":"learn/geometry/#shader-keywords","title":"Shader Keywords","text":"<p>Shader Keywords allow you to enable/disable certain features inside of a shader.  This includes but isn't limited to:</p> <ul> <li>Reflections</li> <li>Fog</li> <li>Rim Lighting</li> </ul> <p>Shader Keywords can be set by the programmer for various usages and combonations while using the same shader.</p> <p>With Geometry, the provided shaders have Shader Keywords, hence the option to change them.</p> <p>Check out the shader keywords available to be enabled for select shaders here.</p>"},{"location":"learn/geometry/#components","title":"Components","text":"<p>You can (and sometimes are required to) use components on geometry aswell! </p> <p>Components work the same way on Geometry as they do on environment objects.</p> <p>Example</p> <p>Say you are creating a light with Geometry. How do you define which lightID and lightType the light is set to be lit?   Did you say COMPONENTS? (Extra points if you said the ILightWithId component :D)</p> <p>In this case, you would use the ILightWithId component when defining the JSON for your Geometry to define the lights' properties:</p> Working 'ILightWithId' Example <pre><code>\"environment\": [\n  {\n    \"geometry\": {\n      \"type\": \"Cube\",\n      \"material\": {\n        \"shader\": \"OpaqueLight\"\n      }\n    },\n    \"components\": {\n      \"ILightWithId\": {\n        \"lightId\": 69,\n        \"type\": 0\n      }\n    },\n    \"scale\": [10,1,1],\n    \"position\": [0,0,10]\n  }\n]\n</code></pre> <p>Wanna try it? Create a light event with a lightID of 69, and a type of 0.</p>"},{"location":"learn/rue/","title":"Runtime Unity Editor (RUE)","text":"<p>RUE Description</p> <p>Runtime Unity Editor is an In-game inspector, editor and interactive console for applications made with Unity3D game engine. It's designed for debugging and modding Unity games, but can also be used as a universal trainer.</p> <p>When applied to BeatSaber; RUE can be used to interact with objects in loaded scenes.  Not only can this be helpful for modders, but it can also benefit environment artists, providing an easy way to find specific objects and inspect them.</p> <p>Question</p> <p>Looking for something more modern?</p> <p>If you're looking for a more modern tool, check out Unity Explorer (Ported to BSIPA..  Originally Developed by Sinai.)</p> <p>Specifically for BeatSaber, Unity Explorer offers a more intuitive UI all over, and allows you to navigate scenes more efficiently.</p> <p>RUE is still useful and works well with Beat Saber, especially if you're using mods like Chroma or Noodle.</p> <p>This guide focuses on Runtime Unity Editor (RUE) for those sticking with that workflow, however both aren't much different.</p>"},{"location":"learn/rue/#features-covered","title":"Features Covered","text":"<ul> <li>Modifying GameObject transform  </li> <li>Destroying / Changing activity of GameObjects  </li> <li>Inspecting / Modifying components of GameObjects  </li> </ul> <p>RUE is made up of modules. For this page, we will only be covering the <code>Object Browser</code> and <code>Inspector</code> modules, along with small/extra features.</p> <p>PSA: This repo was specifically made with Chroma and Noodle in mind, so not all features that RUE offers will be covered\u2014just in-depth explanations of the most helpful features.</p>"},{"location":"learn/rue/#installation","title":"Installation","text":"<p>Note: While you can refer to the Official repo for further documentation, you cannot install the repo version as it\u2019s designed for other mod loaders like MelonLoader. We use a modified version of IPA for BeatSaber (BSIPA).</p> <p>The installation process of RUE is the same as a typical BeatSaber plugin:</p> <ol> <li>Download the RUE <code>.zip</code> file from the BSMG Discord <code>pc-mod-dev</code> channel, or click here to directly download.</li> <li>Open the zip, and drag both <code>Libs</code> and <code>Plugins</code> folders into your BeatSaber root folder.</li> <li>Done! Launch BeatSaber and move on to the Navigation section below.</li> </ol>"},{"location":"learn/rue/#navigation","title":"Navigation","text":"<p>To open RUE, press the <code>G</code> key in-game. This opens the RUE UI (it may have some tabs already open).</p> <p>Focus on the bottom UI area \u2014 this displays all the available RUE modules. Toward the right are additional toggles and tools.</p> <p>We\u2019ll start with Time, then cover the key modules.</p>"},{"location":"learn/rue/#time","title":"Time","text":"<p><code>Time</code> allows you to manipulate the Unity scene's timescale.</p> <ul> <li>Higher values = faster animations and movement  </li> <li>Lower values = slower animations and movement  </li> </ul> <p>Two buttons are included: - <code>&gt;</code> resets time to <code>1.00</code> - \u23f8\ufe0f Sets time to <code>0</code> (pauses time) \u2014 press <code>&gt;</code> to unpause</p> <p>Note: <code>Time</code> does not affect the speed of songs/maps.</p>"},{"location":"learn/rue/#modules","title":"Modules","text":"<p>RUE includes several modules: Clipboard, Inspector, Object Browser, Profile, REPL Console, Viewer.</p> <p>We\u2019ll only cover the Object Browser and the Inspector.</p>"},{"location":"learn/rue/#object-browser","title":"Object Browser","text":"<ul> <li>Lists all GameObjects in the scene  </li> <li>Allows editing of transform properties (Position, Scale, Rotation, etc.)  </li> <li>Lists all components tied to that object, allowing you to edit their properties in the Inspector.</li> </ul>"},{"location":"learn/rue/#object-browser-anatomy","title":"Object Browser Anatomy","text":"<p>Click on each colored section to learn about it!</p> <p></p>"},{"location":"learn/rue/#search","title":"\ud83d\udfe8 \u2013 Search","text":"<ul> <li>Where you are able to search and filter through the GameObject list</li> <li>Filter Options:<ul> <li>Names (Search by object name, default filter)</li> <li>Components (Search by specific component type)  </li> <li>Properties and Statics (not relevant)</li> </ul> </li> <li><code>Clear</code> \u2014 Clear search filter</li> <li><code>Dump Obj</code> \u2014 Not relevant</li> </ul>"},{"location":"learn/rue/#object-list","title":"\ud83d\udfe9 \u2013 Object List","text":"<ul> <li>Lists all GameObjects</li> <li>Click to select an object</li> <li>Grey boxes indicate an expandable parent object</li> <li>Greyed-out objects indicate the object is inactive</li> <li>Selected objects are highlighted blue</li> <li>Right click to open the context menu, pretty much the transform properties</li> </ul>"},{"location":"learn/rue/#transform-properties","title":"\ud83d\udfe5 \u2013 Transform Properties","text":"<p>Shows transform properties of the selected GameObject:</p> <ul> <li>Toggle object active/inactive</li> <li>Transform Control<ul> <li>Position, LocalPosition</li> <li>Scale (LossyScale, LocalScale)</li> <li>Rotation (EulerAngles, LocalEulerAngles)  </li> </ul> </li> <li><code>Inspect</code> button \u2014 sends object to Inspector  </li> <li>\u274c \u2014 destroys the GameObject  </li> </ul> <p>LossyScale (Read-only) - Accumulated scale of an object to the hierarchy LocalScale: Scale of the object relative to it's parent (USE THIS)</p> <p>Warning</p> <p>For RUE Users: Some transform sliders like rotation will behave in a strange way. If this is an issue for you, I'd recommend using Unity Explorer.</p>"},{"location":"learn/rue/#components","title":"\ud83d\udfe6 \u2013 Components","text":"<ul> <li>Lists all components on the selected GameObject</li> <li>Click a component to open it in the Inspector</li> <li>Click the grey box to enable/disable the component</li> <li>Includes a search filter like the main search bar</li> </ul> <p>NOTICE</p> <p>Environment Objects (including the player) use the normal unity transform units of 1 meter.  However, Gameplay objects (notes, bombs, etc..) use Noodle Units which is 0.6 meters for the convenience of making notemods. Learn more about this on the conversion ratios page.</p>"},{"location":"learn/rue/#inspector","title":"Inspector","text":"<p>Used to inspect and modify GameObjects or their components.</p> <p>Component properies like attenuation on the BloomFogEnvironment component can be changed here!</p>"},{"location":"learn/rue/#inspector-anatomy","title":"Inspector Anatomy","text":"<p>Click on each colored section to learn about it!</p> <p></p>"},{"location":"learn/rue/#filters","title":"\ud83d\udfe5 \u2013 Filters","text":"<ul> <li>Textbox + checkboxes  </li> <li><code>Only Declared</code> \u2014 filters out likely useless properties  </li> <li><code>Fields</code> \u2014 may be relevant (example shown below)</li> </ul>"},{"location":"learn/rue/#tabs-member-list","title":"\ud83d\udfe9 \u2013 Tabs &amp; Member List","text":"<ul> <li>Tabs represent selected GameObjects/components  </li> <li>Member list shows deeper inspected objects  </li> <li>Tabs = parent  </li> <li>Members = children  </li> <li>Selected tabs/members = blue  </li> <li>Use tabs to organize multiple inspections</li> </ul> <p>Tip</p> <p>If you have an overwhelming amount of tabs, click the \"Close all tabs\" button located in the top right of the inspector to clear the list.</p>"},{"location":"learn/rue/#property-view","title":"\ud83d\udfe7 \u2013 Property View","text":"<p>Where all modifications are made:</p> <ul> <li>Value/Return Type \u2014 Type of property  </li> <li>Member Name \u2014 Name of the property  </li> <li>Value \u2014 Current value that you can modify</li> </ul> <p>Example</p> <pre><code>bool active = true;\n</code></pre> <p>Appears in the inspector as:s</p> <ul> <li>Type: <code>System.Boolean</code></li> <li>Member Name: <code>active</code></li> <li>Value: <code>true</code></li> </ul> <p></p> <p>Fields can appear as buttons (sub-class) \u2014 click to inspect deeper.</p> <p>Example of a useful field: <code>_fogParams</code>, which controlls the fog.</p> <p>Example for _fogParams</p> <p><pre><code>BloomFogEnvironmentParams _fogParams;\n</code></pre> OR</p> <ul> <li>Type: <code>BloomFogEnvironmentParams</code></li> <li>Member Name: <code>_fogParams</code></li> </ul> <p>Modifying the fog in game is a great way to get a feel for finding specific objects in different ways, and modifying component properties. Watch a video on how to do this with RUE here.</p>"},{"location":"learn/rue/#usage-examples","title":"Usage Examples","text":"<p>Here are some examples to get you going with RUE.  I recommend to follow along in-game to get the hang of it! </p> <p>Since there is dialogue missing from the videos, there are some explanations to some things you may have questions about.  Just click on the title of the card to see the video and expand it for explanations.</p> <p>I used \"spells\" published by Swifter as the map for the examples, check it out here!</p> Find and modify the fog in a map (Component searching) <p>To change fog in BeatSaber, you must modify the parameters in the <code>BloomFogEnvironment</code> component. (Chroma taps into this component when you wish to change the fog on your map.)</p> <p>Because there is only one BloomFogEnvironment component in the scene, we can search for it using the Component filter.</p> <p>We could use \"environment\" as the search since its the parent object name, but component searching is more concrete, and sometimes quicker.</p> Find and modify lasers (Component searching) <p>Lasers in BeatSaber have the <code>TubeBloomPrePassLight</code> component on them \u2013 This is to control their visual behavior.  If you have ever modified a laser, or even a geometry light you may have heard of this component to modify specific properties like <code>colorAlphaMultiplier</code> and <code>bloomFogIntensityMultiplier</code>.</p> <p>Because there are a ton of lights in this map, it takes some time to find the laser but not long.</p> <p>That about covers the installation and basics for RUE!</p>"},{"location":"other/contribute/","title":"Contribute","text":"<p>Hey YOU!   Do you have information you'd like to share all over the BeatSaber modding community? Chroodle may be the place you're looking for.</p> <p>Prior to starting Chroodle, there was a bunch of data and information spread throughout various places like discord servers, github repositories, and even streamable.  Chroodle was created to combat that, and to unify as much Heck-related information in one space as possible. This project became even more worthy after porting the Chroodle repository to it's own website, making ALL information Chroodle provides just a few clicks away.</p> <p>If you believe you have information that would benefit community members who refer to Chroodle, PLEASE reach out.. We would love to integrate any new information you have to offer!</p>"},{"location":"other/contribute/#lets-talk-business","title":"Lets talk business","text":"<p>Please contact ugecko via message request on discord for further conversation.</p> <p>Note: I'm 95% likely to decline a message request if it is too vague. To ensure I actually look at your request, please include somewhere in the message you'd like to contribute to the Chroodle website. </p> <p>If you don't have any access to discord or can't find me whatsoever, please create an issue on the ChroodleWeb Repo on github with the \"integration request\" tag attached.</p> <p>Thank you for your time :)</p>"},{"location":"other/etroubleshoot/","title":"Error Troubleshooting","text":"<p>Here you can find possible solutions to errors you may encounter in several places.</p> <p>Currently, the areas this page supports is:</p> <ul> <li>Heck Error Logs in the BS console (Includes Chroma, Noodle Extensions, etc..)</li> <li>ReMapper terminal errors</li> </ul> <p>Note: Before referring to this page if you are using ReMapper, PLEASE exhaust all of your resources on the ReMapper Wiki. Issues that could be resolved just by reading over documentation will not be covered here.</p> <p>If an error you are experiencing isnt covered here, feel free to reach out for support in the Heck Discord or Swifters Discord.</p>"},{"location":"other/etroubleshoot/#heck","title":"Heck","text":"example error <p>Log Snippet</p> <pre><code>example snippet\n</code></pre> <p>Explanation</p> <p>Example Explanation</p> <p>Solution</p> <p>Example Solution</p>"},{"location":"other/etroubleshoot/#remapper","title":"ReMapper","text":"'Expected double-quoted property in JSON' <p>Log Snippet</p> <pre><code>error: Uncaught (in promise) SyntaxError: Expected double-quoted property name in JSON at position X (line X column X)\n</code></pre> <p>Explanation</p> <p>A JSON file (commonly <code>info.dat</code> or a difficulty file) contains a property that isn't wrapped in double quotes. (Single quotes or noquotes aren't allowed.)  Usually this may happen if you tamper with the <code>.dat</code> without being careful or lack the knowledge of JSON.</p> <p>Correct: <pre><code>  \"_beatsPerMinute\" : 69\n</code></pre> Incorrect: <pre><code>  '_beatsPerMinute' : 69\n</code></pre></p> <p>Solution</p> <p>While this can happen to any JSON file, the log gives us partial information to determining which file this is occuring in.</p> <p>If the log contains <code>at loadInfo (...)</code>, the <code>info.dat</code> file is causing this error. </p> <ul> <li>At the end of the first line of the error, in parentheses is the location of where the error occured in the <code>info.dat</code> file. Ex: <code>(line 7 column 3)</code></li> </ul> <p>If the log contains <code>at readDifficulty(...)</code>, a difficulty file is causing this error. </p> <ul> <li>While the log doesn't explicitly log the file where this is occuring in, it still provides the location of the error in the JSON (Ex: <code>(line 7 column 3)</code>).  Look through each difficulty at the given line number and it should show up.</li> </ul> <p>Note: If you are using Visual Studio Code, it should highlight the affected file AND property.</p> <p>Lastly, replace any single quotes with double quotes: [<code>' -&gt; \"</code>].</p>"},{"location":"userUtils/envDataViewer/","title":"envDataViewer","text":""},{"location":"userUtils/envDataViewer/#environment-data-viewer-wip","title":"Environment Data Viewer (WIP)","text":"Environment Title Environment ID Environment Color Scheme (RGB) Loading... Loading... Loading... Loading... Loading... Loading... Loading... Environment Default Fog Parameters"}]}